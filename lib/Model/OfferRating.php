<?php
/**
 * OfferRating
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\AllegroSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\AllegroSdk\Model;

use \ArrayAccess;
use \OpenAPI\AllegroSdk\ObjectSerializer;

/**
 * OfferRating Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\AllegroSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OfferRating implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OfferRating';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'average_score' => 'string',
        'score_distribution' => '\OpenAPI\AllegroSdk\Model\OfferRatingScoreDistribution[]',
        'total_responses' => 'int',
        'size_feedback' => '\OpenAPI\AllegroSdk\Model\OfferRatingSizeFeedback[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'average_score' => null,
        'score_distribution' => null,
        'total_responses' => null,
        'size_feedback' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'average_score' => 'averageScore',
        'score_distribution' => 'scoreDistribution',
        'total_responses' => 'totalResponses',
        'size_feedback' => 'sizeFeedback'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'average_score' => 'setAverageScore',
        'score_distribution' => 'setScoreDistribution',
        'total_responses' => 'setTotalResponses',
        'size_feedback' => 'setSizeFeedback'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'average_score' => 'getAverageScore',
        'score_distribution' => 'getScoreDistribution',
        'total_responses' => 'getTotalResponses',
        'size_feedback' => 'getSizeFeedback'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['average_score'] = $data['average_score'] ?? null;
        $this->container['score_distribution'] = $data['score_distribution'] ?? null;
        $this->container['total_responses'] = $data['total_responses'] ?? null;
        $this->container['size_feedback'] = $data['size_feedback'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['total_responses']) && ($this->container['total_responses'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_responses', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets average_score
     *
     * @return string|null
     */
    public function getAverageScore()
    {
        return $this->container['average_score'];
    }

    /**
     * Sets average_score
     *
     * @param string|null $average_score Average score of offer rating.
     *
     * @return self
     */
    public function setAverageScore($average_score)
    {
        $this->container['average_score'] = $average_score;

        return $this;
    }

    /**
     * Gets score_distribution
     *
     * @return \OpenAPI\AllegroSdk\Model\OfferRatingScoreDistribution[]|null
     */
    public function getScoreDistribution()
    {
        return $this->container['score_distribution'];
    }

    /**
     * Sets score_distribution
     *
     * @param \OpenAPI\AllegroSdk\Model\OfferRatingScoreDistribution[]|null $score_distribution List score distribution with count.
     *
     * @return self
     */
    public function setScoreDistribution($score_distribution)
    {
        $this->container['score_distribution'] = $score_distribution;

        return $this;
    }

    /**
     * Gets total_responses
     *
     * @return int|null
     */
    public function getTotalResponses()
    {
        return $this->container['total_responses'];
    }

    /**
     * Sets total_responses
     *
     * @param int|null $total_responses Number of total responses.
     *
     * @return self
     */
    public function setTotalResponses($total_responses)
    {

        if (!is_null($total_responses) && ($total_responses < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_responses when calling OfferRating., must be bigger than or equal to 0.');
        }

        $this->container['total_responses'] = $total_responses;

        return $this;
    }

    /**
     * Gets size_feedback
     *
     * @return \OpenAPI\AllegroSdk\Model\OfferRatingSizeFeedback[]|null
     */
    public function getSizeFeedback()
    {
        return $this->container['size_feedback'];
    }

    /**
     * Sets size_feedback
     *
     * @param \OpenAPI\AllegroSdk\Model\OfferRatingSizeFeedback[]|null $size_feedback List of size feedback.
     *
     * @return self
     */
    public function setSizeFeedback($size_feedback)
    {
        $this->container['size_feedback'] = $size_feedback;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


