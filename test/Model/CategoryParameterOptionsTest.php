<?php
/**
 * CategoryParameterOptionsTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\AllegroSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\AllegroSdk\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * CategoryParameterOptionsTest Class Doc Comment
 *
 * @category    Class
 * @description A list of the different options which can be used with this parameter.
 * @package     OpenAPI\AllegroSdk
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CategoryParameterOptionsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CategoryParameterOptions"
     */
    public function testCategoryParameterOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "variants_allowed"
     */
    public function testPropertyVariantsAllowed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "variants_equal"
     */
    public function testPropertyVariantsEqual()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ambiguous_value_id"
     */
    public function testPropertyAmbiguousValueId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "depends_on_parameter_id"
     */
    public function testPropertyDependsOnParameterId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "required_depends_on_value_ids"
     */
    public function testPropertyRequiredDependsOnValueIds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "display_depends_on_value_ids"
     */
    public function testPropertyDisplayDependsOnValueIds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "describes_product"
     */
    public function testPropertyDescribesProduct()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "custom_values_enabled"
     */
    public function testPropertyCustomValuesEnabled()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
